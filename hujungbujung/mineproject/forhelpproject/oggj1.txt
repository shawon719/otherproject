
Creating a car rental project in PHP, MySQL, JavaScript, HTML, and CSS involves several steps, from setting up the database to building the frontend and backend for managing car rentals. Below is a comprehensive guide to help you build the project.

Project Overview
The car rental system will allow users to:

Browse available cars for rent.
Register and login to book a car.
View and manage their bookings.
Admin will be able to add, edit, and remove cars from the system, and view bookings.
Steps to Create the Car Rental Project
1. Set Up the Development Environment
Install a local server like XAMPP or WAMP which includes PHP, MySQL, and Apache.
Create a folder inside htdocs (or www for WAMP) called car_rental.
2. Database Design
Create the Database and Tables
Use PHPMyAdmin (or MySQL CLI) to create a database, say car_rental_db.
sql
Copy code
CREATE DATABASE car_rental_db;
Now create the following tables:

Users Table
sql
Copy code
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    password VARCHAR(255),
    phone VARCHAR(15),
    role ENUM('user', 'admin') DEFAULT 'user',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Cars Table
sql
Copy code
CREATE TABLE cars (
    car_id INT AUTO_INCREMENT PRIMARY KEY,
    car_name VARCHAR(100),
    car_model VARCHAR(50),
    price_per_day DECIMAL(10, 2),
    availability ENUM('available', 'rented') DEFAULT 'available',
    car_image VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Bookings Table
sql
Copy code
CREATE TABLE bookings (
    booking_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    car_id INT,
    start_date DATE,
    end_date DATE,
    total_price DECIMAL(10, 2),
    status ENUM('pending', 'confirmed', 'cancelled') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (car_id) REFERENCES cars(car_id)
);
3. Frontend (HTML, CSS, JavaScript)
HTML Structure
Create the following pages:

index.php – Home page, where users can see available cars.
login.php – User login page.
register.php – User registration page.
dashboard.php – After login, users can see their bookings.
admin_dashboard.php – For the admin to manage cars and bookings.
book_car.php – To book a car.
Each page will include the relevant forms, buttons, and links.

Example of index.php
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Car Rental</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>Welcome to Car Rental Service</h1>
        <nav>
            <ul>
                <li><a href="index.php">Home</a></li>
                <li><a href="login.php">Login</a></li>
                <li><a href="register.php">Register</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <h2>Available Cars</h2>
        <div class="cars">
            <!-- Cars will be dynamically loaded here -->
        </div>
    </main>
</body>
</html>
Example of styles.css
css
Copy code
body {
    font-family: Arial, sans-serif;
}

header {
    background-color: #333;
    color: white;
    padding: 10px;
}

nav ul {
    list-style: none;
    padding: 0;
}

nav ul li {
    display: inline;
    margin-right: 20px;
}

.cars {
    display: flex;
    flex-wrap: wrap;
}

.car {
    border: 1px solid #ccc;
    margin: 10px;
    padding: 10px;
    width: 200px;
}
Example of script.js
Add basic interactivity, such as form validation:

javascript
Copy code
document.getElementById("registerForm").addEventListener("submit", function(event) {
    let email = document.getElementById("email").value;
    let password = document.getElementById("password").value;
    if (email === "" || password === "") {
        alert("All fields are required!");
        event.preventDefault();
    }
});
4. Backend (PHP)
Connecting to the Database (db.php)
php
Copy code
<?php
$host = 'localhost';
$dbname = 'car_rental_db';
$username = 'root';
$password = '';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Could not connect to the database $dbname :" . $e->getMessage());
}
?>
User Registration (register.php)
php
Copy code
<?php
include('db.php');
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $name = $_POST['full_name'];
    $email = $_POST['email'];
    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);
    $phone = $_POST['phone'];

    $query = "INSERT INTO users (full_name, email, password, phone) VALUES (?, ?, ?, ?)";
    $stmt = $pdo->prepare($query);
    $stmt->execute([$name, $email, $password, $phone]);
    header('Location: login.php');
}
?>

<form action="register.php" method="POST">
    <input type="text" name="full_name" required placeholder="Full Name">
    <input type="email" name="email" required placeholder="Email">
    <input type="password" name="password" required placeholder="Password">
    <input type="text" name="phone" required placeholder="Phone">
    <button type="submit">Register</button>
</form>
User Login (login.php)
php
Copy code
<?php
session_start();
include('db.php');
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $email = $_POST['email'];
    $password = $_POST['password'];

    $query = "SELECT * FROM users WHERE email = ?";
    $stmt = $pdo->prepare($query);
    $stmt->execute([$email]);
    $user = $stmt->fetch();

    if ($user && password_verify($password, $user['password'])) {
        $_SESSION['user_id'] = $user['user_id'];
        header('Location: dashboard.php');
    } else {
        echo "Invalid login credentials.";
    }
}
?>

<form action="login.php" method="POST">
    <input type="email" name="email" required placeholder="Email">
    <input type="password" name="password" required placeholder="Password">
    <button type="submit">Login</button>
</form>
Booking a Car (book_car.php)
php
Copy code
<?php
session_start();
include('db.php');

if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
}

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $car_id = $_POST['car_id'];
    $start_date = $_POST['start_date'];
    $end_date = $_POST['end_date'];
    $total_price = $_POST['total_price']; // Calculate this based on days and price per day

    $query = "INSERT INTO bookings (user_id, car_id, start_date, end_date, total_price) VALUES (?, ?, ?, ?, ?)";
    $stmt = $pdo->prepare($query);
    $stmt->execute([$_SESSION['user_id'], $car_id, $start_date, $end_date, $total_price]);

    header('Location: dashboard.php');
}
?>

<form action="book_car.php" method="POST">
    <input type="date" name="start_date" required>
    <input type="date" name="end_date" required>
    <input type="number" name="total_price" required placeholder="Total Price">
    <button type="submit">Book Now</button>
</form>
5. Admin Dashboard (admin_dashboard.php)
Admins should be able to add, remove, or update car information and view bookings.

php
Copy code
<?php
session_start();
if ($_SESSION['role'] != 'admin') {
    header('Location: login.php');
}
?>

<h2>Admin Dashboard</h2>
<a href="add_car.php">Add New Car</a>
<h3>Manage Cars</h3>
<!-- Add a table to list cars and provide edit/delete options -->
6. Testing and Debugging
Test user registration, login, booking flow, and car management functionality.
Debug issues as they arise, especially SQL queries and form validation.
7. Deployment
Host the website on a server with PHP and MySQL support.
Make sure to secure sensitive data like passwords and implement features like SSL certificates for security.
This guide provides a high-level structure to build a car rental system. You can customize it further with features like payment integration, search filters, etc.



